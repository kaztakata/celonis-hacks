<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pull Up Function on Celonis hacks</title>
    <link>https://kaztakata.github.io/celonis-hacks/tags/pull-up-function/</link>
    <description>Recent content in Pull Up Function on Celonis hacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Sep 2021 09:06:11 +0900</lastBuildDate>
    
	<atom:link href="https://kaztakata.github.io/celonis-hacks/tags/pull-up-function/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Convert count unit of KPI by COUNT DISTINCT</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-09-04-convert-count-unit-of-kpi-by-count-distinct/</link>
      <pubDate>Sat, 04 Sep 2021 09:06:11 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-09-04-convert-count-unit-of-kpi-by-count-distinct/</guid>
      <description>Last week I was asked to convert count unit of some KPI (that returns 1 or 0) from delivery item to delivery document (convert if all items in the document are 1 then document KPI is 1, else 0). In this case delivery document and item columns are stored at Activity table like this post&amp;rsquo;s third topic. I already used DOMAIN_TABLE to group activity record by delivery item then calculate KPI.</description>
    </item>
    
    <item>
      <title>Count rows of Tables in various way</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-08-28-count-rows-of-tables-in-various-way/</link>
      <pubDate>Sat, 28 Aug 2021 11:11:45 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-08-28-count-rows-of-tables-in-various-way/</guid>
      <description>Counting rows of tables is frequently used so we are not aware about how to do it. But sometimes I got stuck to do it so I would like to deep dive this topic today.
For today&amp;rsquo;s demo case I use P2P data model and three tables, header EKKO (key columns are MANDT/EBELN), item EKPO (MANDT/EBELN/EBELP) and activity. Also I used sum of item Net value. Below screen is the result of today&amp;rsquo;s demo.</description>
    </item>
    
    <item>
      <title>Categorize and Name Activity</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-07-24-categorize-and-name-activity/</link>
      <pubDate>Sat, 24 Jul 2021 10:47:12 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-07-24-categorize-and-name-activity/</guid>
      <description>In the previous post Transform Source System Tables to Minimize Data Model Tables, I recommended to convert some kind of source system tables to Activity. Today I focus on Activity and would like to share my way how to categorize and name Activity.
First point is to split Activity name to two parts, more general part and detail part. For example, in SAP ECC or S4HANA Order to Cash process, general Activity name is Create Sales Order when data committed in VA01 transaction.</description>
    </item>
    
    <item>
      <title>Maintain Saved Formulas effectively</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-07-03-maintain-saved-formulas-effectively/</link>
      <pubDate>Sat, 03 Jul 2021 21:25:28 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-07-03-maintain-saved-formulas-effectively/</guid>
      <description>In the last post Handle NULL efficiently in Aggregation Function, I used saved formulas to split long and complex PQL to reusable components. Today I would like to share my best practice to use saved formulas.
For example I would like to ananlyze throughput time between arbitrary two activities. As below screenshot I created three dropdown buttons, switching time unit (sec, min, hour, day etc.) and two activities (from / to).</description>
    </item>
    
    <item>
      <title>Handle NULL efficiently in Aggregation Function</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-06-26-handle-null-efficiently-in-aggregation-function/</link>
      <pubDate>Sat, 26 Jun 2021 09:37:59 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-06-26-handle-null-efficiently-in-aggregation-function/</guid>
      <description>I looked at many PQLs that can be simplified if they know about NULL handling well. Today I would like to tell how to handle NULL efficiently in Aggregation Functions (COUNT,SUM,AVG etc.).
Today I would like to use O2C process to explain my case. I determined KPI Send Invoice within a day after Ship Goods, because sales company will Ship Goods then should Send Invoice immediately.
Same as previous posts, first I would like to create OLAP table to look into the cases.</description>
    </item>
    
    <item>
      <title>Use Pull up function as Subquery</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-05-29-use-pull-up-function-as-subquery/</link>
      <pubDate>Sat, 29 May 2021 13:04:06 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-05-29-use-pull-up-function-as-subquery/</guid>
      <description>In the last post Determine First Time Right by Pull up function, I broke down PQL of FTR step by step. Today I will explain more complex KPI in similar way. By the way you may know Subquery that enables to pass result of SQL to parts of another SQL. PQL can also do similar things by Pull up function.
In this post, for example I would like to calculate Average rework count after Delivery in Order to Cash process, and definition of rework is same as previous post.</description>
    </item>
    
    <item>
      <title>Determine First Time Right by Pull up function</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-05-22-determine-first-time-right-by-pull-up-function/</link>
      <pubDate>Sat, 22 May 2021 16:31:16 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-05-22-determine-first-time-right-by-pull-up-function/</guid>
      <description>As a first example of Pull up function, I will show you First Time Right (FTR) that means process without rework activities (link).
To determine whether each case is FTR or not, first I should determine rework activities, then judge if each case has rework activities or not. In this example I determined that rework activity name is started from Change. PQL to find such a string pattern is Change %, using wildcard % after Change.</description>
    </item>
    
    <item>
      <title>Understand mechanism of Pull up function</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-05-15-understand-mechanism-of-pull-up-function/</link>
      <pubDate>Sat, 15 May 2021 10:00:14 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-05-15-understand-mechanism-of-pull-up-function/</guid>
      <description>Pull up aggregation function, called PU function, like PU_COUNT, PU_SUM, PU_AVG, PU_MAX, PU_MIN looks similar to Standard aggregation function like COUNT, SUM, AVG, MAX, MIN. In Celonis, it is important to understand that output of PU function is not KPI but dimension. You can see Understand Difference between Dimension and KPI.
If you know about SQL, you can imagine that PU function is similar to window function in SQL. As other functions, PU functions add dynamic column in grouping table.</description>
    </item>
    
  </channel>
</rss>