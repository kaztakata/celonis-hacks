<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on Celonis hacks</title>
    <link>https://kaztakata.github.io/celonis-hacks/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on Celonis hacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Jun 2022 09:25:43 +0900</lastBuildDate><atom:link href="https://kaztakata.github.io/celonis-hacks/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find out HTTP Request from GUI Function</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2022-06-04-find-out-http-request-from-gui-function/</link>
      <pubDate>Sat, 04 Jun 2022 09:25:43 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2022-06-04-find-out-http-request-from-gui-function/</guid>
      <description>In the previous post Observe HTTP request in Pycelonis login script, I showed how to observe HTTP request under Pycelonis API. In this observation I found HTTP request requires at least Authorization header and of course URL to reach to resource in Celonis EMS. Also I found that I can manage to investigate which HTTP request is sent when calling Pycelonis class method.
By the way, not all HTTP requests are implemented in Pycelonis.</description>
    </item>
    
    <item>
      <title>Observe HTTP request in Pycelonis login script</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2022-05-28-observe-http-request-in-pycelonis-login-script/</link>
      <pubDate>Sat, 28 May 2022 07:59:48 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2022-05-28-observe-http-request-in-pycelonis-login-script/</guid>
      <description>I showed how to login to Celonis EMS using Pycelonis in previous posts. Authentication topic I mentioned there is the most annoying when using API, but after mastering this I can transfer this knowledge to another areas easily.
To master authentication, I would like to show the mechanism of HTTP request in the internet (web) programming. Even I did not know HTTP request well at the beginning of using Celonis, now I got some of basic knowledge and it is enough to use HTTP request.</description>
    </item>
    
    <item>
      <title>Limit permissions of API token to minimize risk</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2022-05-21-limit-permissions-of-api-token-to-minimize-risk/</link>
      <pubDate>Sat, 21 May 2022 09:31:32 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2022-05-21-limit-permissions-of-api-token-to-minimize-risk/</guid>
      <description>At last post Login to Celonis EMS from Jupyter Workbench, I used API key that have same permission as my GUI user. I mentioned that it is too strong and risky against unauthorized access. Imagine your API token accidentally make public, then anyone can operate Celonis instead of you. That is why I segregate API token from Notebook (Notebook may be published to GitHub etc.). Anyway, user API token must be altered to another weaker key especially in production system.</description>
    </item>
    
    <item>
      <title>Login to Celonis EMS from Jupyter Workbench</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2022-05-14-login-to-celonis-ems-from-jupyter-workbench/</link>
      <pubDate>Sat, 14 May 2022 10:40:29 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2022-05-14-login-to-celonis-ems-from-jupyter-workbench/</guid>
      <description>At last post Start Deep Dive to Machine Learning and Action Flow, I introduced overview of these two functions that manipulate Celonis EMS functions without using GUI (browser) for automatation.
From today I would like to share basic functions in Machine Learning (Jupyter Workbench). Before staring I will setup Jupyter Workbench. If you do not have your Workbench, read Share my Analysis by Content-CLI then follow until creating Workbench.
I will go to Launcher in Workbench then select Others &amp;gt; Terminal, then enter below command after $ sign (output is as of 2022-05-14).</description>
    </item>
    
    <item>
      <title>Start Deep Dive to Machine Learning and Action Flow</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2022-05-07-start-deep-dive-to-machine-learning-and-action-flow/</link>
      <pubDate>Sat, 07 May 2022 12:54:54 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2022-05-07-start-deep-dive-to-machine-learning-and-action-flow/</guid>
      <description>Until last post, I have seen the flow of process discovery through Celonis Process Analytics (or Studio Analysis) and prerequisite ETL (Extraction, Transformation, Load) by Data Integration. I already worked in multiple static process mining projects and found that they are enough functions for static process mining. And other process mining solutions are provided these functions too.
By the way, referring to Process Mining Data Science in Action by Wil van der Aalst, Process Mining can also make it possible for further actions such as monitoring and predictive analysis.</description>
    </item>
    
    <item>
      <title>Execute Periodic ETL Automatically</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2022-04-30-execute-periodic-etl-automatically/</link>
      <pubDate>Sat, 30 Apr 2022 08:54:10 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2022-04-30-execute-periodic-etl-automatically/</guid>
      <description>Until last post Validate Data Model by Studio Analysis, I completed creating ETL programs in Data Integration. But this is still test product because this programs are executed manually by operator. In this post, I would like to share the final piece of Data Integration, how to run ETL programs automatically after production release.
There are several ways to achieve automatic ETL, for example in my production system I am using scheduler in Machine Learning Workbench to trigger Jupyter Notebook, then operate Data Integration via Pycelonis (Python API for Celonis EMS).</description>
    </item>
    
    <item>
      <title>Share my Analysis by Content-CLI</title>
      <link>https://kaztakata.github.io/celonis-hacks/posts/2021-08-14-share-my-analysis-by-content-cli/</link>
      <pubDate>Sat, 14 Aug 2021 13:33:06 +0900</pubDate>
      
      <guid>https://kaztakata.github.io/celonis-hacks/posts/2021-08-14-share-my-analysis-by-content-cli/</guid>
      <description>Recently I was thinking how to share my work with you not only blog post but experience by live environment. Today I would like to tell how to reproduce my Analysis to your environment by Content-CLI. Content-CLI is used to copy programs between Celonis environments via backup file. I created backup file and upload to public repository. So you can download it and reproduce my program in your environment.
First you need to open your training environment if you do not.</description>
    </item>
    
  </channel>
</rss>
